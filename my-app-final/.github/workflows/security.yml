name: Security Audit & Compliance

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'package*.json'
      - '.github/workflows/security.yml'

jobs:
  dependency-check:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run dependency audit
      run: |
        echo "üîç Checking for known vulnerabilities in dependencies..."
        npm audit --audit-level moderate
    
    - name: Generate audit report
      run: |
        npm audit --json > audit-report.json
        echo "üìä Audit report generated"
    
    - name: Upload audit report
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-report
        path: audit-report.json

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install license-checker
      run: npm install -g license-checker
    
    - name: Check licenses
      run: |
        echo "üìÑ Checking license compliance..."
        license-checker --summary --excludePrivatePackages
    
    - name: Generate license report
      run: |
        license-checker --json --excludePrivatePackages > license-report.json
        echo "üìä License report generated"
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-compliance-report
        path: license-report.json

  security-scan:
    name: Advanced Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for hardcoded secrets
      run: |
        echo "üîê Scanning for hardcoded secrets..."
        # Simple grep patterns for common secrets
        if grep -r -i -E "(password|secret|key|token)" --include="*.js" --include="*.ts" --include="*.tsx" src/; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found - please review"
        else
          echo "‚úÖ No obvious hardcoded secrets found"
        fi

  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check nginx security configuration
      run: |
        echo "üîí Checking security headers configuration..."
        if [ -f "nginx.conf" ]; then
          echo "Found nginx.conf, checking security headers..."
          if grep -q "X-Frame-Options" nginx.conf && \
             grep -q "X-Content-Type-Options" nginx.conf && \
             grep -q "X-XSS-Protection" nginx.conf && \
             grep -q "Strict-Transport-Security" nginx.conf; then
            echo "‚úÖ Security headers are configured"
          else
            echo "‚ö†Ô∏è Some security headers are missing"
          fi
        else
          echo "‚ö†Ô∏è No nginx.conf found - security headers should be configured in your web server"
        fi
    
    - name: Verify CSP configuration
      run: |
        echo "üõ°Ô∏è Checking Content Security Policy..."
        if grep -r "Content-Security-Policy" public/ src/ || \
           grep -r "contentSecurityPolicy" src/; then
          echo "‚úÖ CSP configuration found"
        else
          echo "‚ö†Ô∏è Consider implementing Content Security Policy"
        fi

  notify:
    name: Security Notification
    needs: [dependency-check, license-check, security-scan, security-headers]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Security audit summary
      run: |
        echo "üîí Security Audit Complete"
        echo "‚úÖ Dependency check: ${{ needs.dependency-check.result }}"
        echo "‚úÖ License check: ${{ needs.license-check.result }}"
        echo "‚úÖ Security scan: ${{ needs.security-scan.result }}"
        echo "‚úÖ Security headers: ${{ needs.security-headers.result }}"
        
        if [ "${{ needs.dependency-check.result }}" != "success" ] || \
           [ "${{ needs.license-check.result }}" != "success" ] || \
           [ "${{ needs.security-scan.result }}" != "success" ] || \
           [ "${{ needs.security-headers.result }}" != "success" ]; then
          echo "‚ùå Some security checks failed - please review"
          exit 1
        else
          echo "‚úÖ All security checks passed"
        fi